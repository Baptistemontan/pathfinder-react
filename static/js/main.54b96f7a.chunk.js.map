{"version":3,"sources":["components/Node.jsx","components/List.jsx","components/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","onMouseDown","e","parent","launchID","autoRefresh","reset","button","weightToggle","mousePressed","node","isStart","isEnd","moveStart","moveEnd","weight","removeWeights","addWeights","isWall","removeWalls","addWalls","onMouseEnter","setState","exNodeRow","startNode","row","exNodeCol","col","grid","updateIO","endNode","launchDelay","launch","onUpdate","isVisited","isPath","onVisitedUpdate","onPathUpdate","onReset","isChecked","onIOUpdate","timeoutRef","undefined","state","eventName","this","document","addEventListener","classNames","className","Component","List","handleListClick","active","handleOptionClick","content","name","handleChange","list","choices","question","id","optionsContainerClass","onClick","map","index","key","type","htmlFor","sendEvent","event","CustomEvent","dispatchEvent","Grid","initGrid","createNode","update","Math","random","forEach","clear","visualizeButtonHandler","animation","activeAlgo","console","time","distance","algos","Dijkstra","timeEnd","element","getElementById","classList","add","setTimeout","remove","handleMouseUp","handleAlgoChange","handleRefreshChange","handleSpeedChange","speed","handleMazeGeneration","mazeGenerator","diagonal","speeds","refresh","assigned","preventDefault","onMouseUp","parentNode","goalRow","goalCol","astar","ID","nodeQueue","iteration","vectors","push","sortQueue","sort","a","b","comparaison","heuristic","testNeighbour","neighbourNode","abs","updateVisited","pathFounded","offset","updatePath","vector","nextNode","shift","randomNeighbour","availablesNeigbours","testNeigbours","length","floor","openMiddleNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+RAIqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAkBRC,YAAc,SAAAC,GACZ,EAAKC,OAAOC,SAAW,KAClB,EAAKD,OAAOE,aACf,EAAKF,OAAOG,QAEG,IAAbJ,EAAEK,SACJ,EAAKJ,OAAOK,cAAe,GAE7B,EAAKL,OAAOM,cAAe,EACvB,EAAKC,KAAKC,SAAW,EAAKD,KAAKE,MAC7B,EAAKF,KAAKC,QACZ,EAAKR,OAAOU,WAAY,EAExB,EAAKV,OAAOW,SAAU,EAGpB,EAAKX,OAAOK,aACV,EAAKE,KAAKK,OAAS,EACrB,EAAKZ,OAAOa,eAAgB,EAE5B,EAAKb,OAAOc,YAAa,EAGvB,EAAKP,KAAKQ,OACZ,EAAKf,OAAOgB,aAAc,EAE1B,EAAKhB,OAAOiB,UAAW,EAI7B,EAAKC,gBAjDY,EAmDnBA,aAAe,WACb,GAAI,EAAKlB,OAAOM,aACd,IAAK,EAAKN,OAAOU,YAAa,EAAKV,OAAOW,SAAa,EAAKJ,KAAKQ,OAqB7D,EAAKf,OAAOiB,WACX,EAAKV,KAAKQ,QACU,IAArB,EAAKR,KAAKK,QAEV,EAAKL,KAAKQ,QAAS,EACnB,EAAKI,SAAS,CAAEJ,QAAQ,KACf,EAAKf,OAAOgB,aAAe,EAAKT,KAAKQ,QAC9C,EAAKR,KAAKQ,QAAS,EACnB,EAAKI,SAAS,CAAEJ,QAAQ,KAExB,EAAKf,OAAOc,YACS,IAArB,EAAKP,KAAKK,SACT,EAAKL,KAAKQ,QAEX,EAAKR,KAAKK,OA3FL,GA4FL,EAAKO,SAAS,CAAEP,OA5FX,MA6FI,EAAKZ,OAAOa,eAAiB,EAAKN,KAAKK,OAAS,IACzD,EAAKL,KAAKK,OAAS,EACnB,EAAKO,SAAS,CAAEP,OAAQ,SAvC6C,CACvE,GAAI,EAAKZ,OAAOU,YAAc,EAAKH,KAAKC,QAAS,CAC/C,EAAKD,KAAKC,SAAU,EACpB,IAAMY,EAAY,EAAKpB,OAAOqB,UAAUC,IAClCC,EAAY,EAAKvB,OAAOqB,UAAUG,IACxC,EAAKxB,OAAOyB,KAAKL,GAAWG,GAAWG,WACvC,EAAK1B,OAAOqB,UAAUC,IAAM,EAAKA,IACjC,EAAKtB,OAAOqB,UAAUG,IAAM,EAAKA,IACjC,EAAKL,SAAS,CAAEX,SAAS,SACpB,GAAI,EAAKR,OAAOW,UAAY,EAAKJ,KAAKE,MAAO,CAClD,EAAKF,KAAKE,OAAQ,EAClB,IAAMW,EAAY,EAAKpB,OAAO2B,QAAQL,IAChCC,EAAY,EAAKvB,OAAO2B,QAAQH,IACtC,EAAKxB,OAAOyB,KAAKL,GAAWG,GAAWG,WACvC,EAAK1B,OAAO2B,QAAQL,IAAM,EAAKA,IAC/B,EAAKtB,OAAO2B,QAAQH,IAAM,EAAKA,IAC/B,EAAKL,SAAS,CAAEV,OAAO,IAEzB,EAAKT,OAAO4B,aAAc,EAyB1B,EAAK5B,OAAO4B,aAAe,EAAK5B,OAAOE,cACzC,EAAK2B,SACL,EAAK7B,OAAO4B,aAAc,IAlGX,EAqGnBE,SAAW,WACT,EAAKvB,KAAO,EAAKP,OAAOyB,KAAK,EAAKH,KAAK,EAAKE,KACxC,EAAKjB,KAAKwB,WACZ,EAAKZ,SAAS,CAAEY,WAAW,IAEzB,EAAKxB,KAAKyB,QACZ,EAAKb,SAAS,CAAEa,QAAQ,KA3GT,EA8GnBC,gBAAkB,WAChB,EAAKd,SAAS,CAAEY,WAAW,KA/GV,EAiHnBG,aAAe,WACb,EAAKf,SAAS,CAAEa,QAAQ,KAlHP,EAoHnBG,QAAU,WACR,EAAK5B,KAAO,EAAKP,OAAOyB,KAAK,EAAKH,KAAK,EAAKE,KAC5C,EAAKL,SAAS,CACZa,QAAQ,EACRD,WAAW,EACXK,WAAW,EACXrB,OAAQ,EAAKR,KAAKQ,UA1HH,EA6HnBsB,WAAa,WACX,EAAKlB,SAAS,CAAEX,SAAS,EAAOC,OAAO,KA5HvC,EAAKT,OAAS,EAAKH,MAAMG,OACzB,EAAKsB,IAAM,EAAKzB,MAAMyB,IACtB,EAAKE,IAAM,EAAK3B,MAAM2B,IACtB,EAAKjB,KAAO,EAAKP,OAAOyB,KAAK,EAAKH,KAAK,EAAKE,KAC5C,EAAKK,OAAS,EAAKhC,MAAMgC,OACzB,EAAKS,gBAAaC,EAClB,EAAKC,MAAQ,CACXzB,QAAQ,EACRH,OAAQ,EACRJ,QAAS,EAAKD,KAAKC,QACnBC,MAAO,EAAKF,KAAKE,MACjB2B,WAAW,EACXL,WAAW,EACXC,QAAQ,GAfO,E,iFAiIjB,IAAMS,EAAY,QAAUC,KAAKpB,IAAM,IAAMoB,KAAKlB,IAClDmB,SAASC,iBAAiB,SAAUF,KAAKZ,UACzCa,SAASC,iBAAiB,QAASF,KAAKP,SACxCQ,SAASC,iBAAiBH,EAAY,WAAYC,KAAKT,iBACvDU,SAASC,iBAAiBH,EAAY,QAASC,KAAKR,cACpDS,SAASC,iBAAiBH,EAAY,MAAOC,KAAKL,c,+BAE1C,IAAD,EACuDK,KAAKF,MAA3DhC,EADD,EACCA,QAASC,EADV,EACUA,MAAOM,EADjB,EACiBA,OAAQgB,EADzB,EACyBA,UAAWC,EADpC,EACoCA,OACvCa,EAAa,QAajB,OAZAA,GAAcrC,EACV,aACAC,EACA,WACAM,EACA,YACAiB,EACA,YACAD,EACA,eACA,GACJc,GAdO,EAC4CjC,OAa5B,EAAI,eAAiB,GAE1C,yBACEkC,UAAWD,EACX/C,YAAa4C,KAAK5C,YAClBoB,aAAcwB,KAAKxB,cAEnB,6BACE,uBAAG4B,UAAU,2BACb,uBAAGA,UAAU,0BACb,uBAAGA,UAAU,wC,GAjKWC,aCFbC,E,YACnB,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KAURoD,gBAAkB,WACZ,EAAKT,MAAMU,OACb,EAAK/B,SAAS,CAAE+B,QAAQ,IAExB,EAAK/B,SAAS,CAAE+B,QAAQ,KAfT,EAkBnBC,kBAAoB,SAAAC,GAClB,EAAKjC,SAAS,CAAEkC,KAAMD,EAASF,QAAQ,IACvC,EAAKI,aAAaF,IAlBlB,EAAKG,KAAO,EAAK1D,MAAM2D,QACvB,EAAKC,SAAW,EAAK5D,MAAM4D,SAC3B,EAAKH,aAAe,EAAKzD,MAAMyD,aAC/B,EAAKI,GAAK,EAAK7D,MAAM6D,GACrB,EAAKlB,MAAQ,CACXU,QAAQ,EACRG,KAAM,EAAKxD,MAAMwD,MARF,E,sEAsBT,IAAD,OACDM,EACJ,qBAAuBjB,KAAKF,MAAMU,OAAS,UAAY,IACzD,OACE,yBAAKJ,UAAU,qBAAqBY,GAAIhB,KAAKgB,IAC3C,yBAAKZ,UAAU,uBAAuBc,QAASlB,KAAKO,iBACjDP,KAAKe,UAER,yBAAKX,UAAU,cACb,yBAAKA,UAAU,qBAAqBc,QAASlB,KAAKO,iBAC/CP,KAAKF,MAAMa,MAEd,yBAAKP,UAAWa,GACbjB,KAAKa,KAAKM,KAAI,SAACR,EAAMS,GACpB,OACE,yBACEhB,UAAU,SACViB,IAAKV,EACLO,QAAS,kBAAM,EAAKT,kBAAkBE,KAEtC,2BACEW,KAAK,QACLlB,UAAU,QACVY,GAAI,EAAKA,GAAK,SAAWI,EACzBT,KAAK,aAEP,2BAAOY,QAAS,EAAKP,GAAK,SAAWI,GAAQT,c,GAjD7BN,aCI5BmB,EAAY,SAAAb,GAChB,IAAMc,EAAQ,IAAIC,YAAYf,GAC9BV,SAAS0B,cAAcF,IAGJG,E,YACnB,WAAYzE,GAAQ,IAAD,8BACjB,4CAAMA,KAoCR0E,SAAW,WACT,IAAK,IAAIjD,EAAM,EAAGA,EA9CH,GA8CqBA,IAAO,CACzC,EAAKG,KAAKH,GAAO,GACjB,IAAK,IAAIE,EAAM,EAAGA,EA/CL,GA+CuBA,IAClC,EAAKC,KAAKH,GAAKE,GAAO,IAAIgD,EAAWlD,EAAKE,GACtCF,IAAQ,EAAKD,UAAUC,KAAOE,IAAQ,EAAKH,UAAUG,MACvD,EAAKC,KAAKH,GAAKE,GAAKhB,SAAU,GAE5Bc,IAAQ,EAAKK,QAAQL,KAAOE,IAAQ,EAAKG,QAAQH,MACnD,EAAKC,KAAKH,GAAKE,GAAKf,OAAQ,KA9CjB,EAmDnBN,MAAQ,WAAoB,IAAnBsE,IAAkB,yDACzB,EAAKxE,SAAWyE,KAAKC,SACrB,EAAKlD,KAAKmD,SAAQ,SAAAtD,GAAG,OAAIA,EAAIsD,SAAQ,SAAArE,GAAI,OAAIA,EAAKJ,cAC9CsE,GACFP,EAAU,UAvDK,EA2DnBW,MAAQ,WACN,EAAK5E,SAAWyE,KAAKC,SACrB,EAAKlD,KAAKmD,SAAQ,SAAAtD,GAAG,OAAIA,EAAIsD,SAAQ,SAAArE,GAAI,OAAIA,EAAKsE,cAClD,EAAK1E,SA9DY,EAiEnB2E,uBAAyB,WACvB,EAAKjD,QAAO,IAlEK,EAqEnBA,OAAS,WAAwB,IAAvBkD,EAAsB,wDAC9B,GAAuB,MAAnB,EAAKC,WAAoB,CAC3BC,QAAQC,KAAK,EAAKF,YAClB,EAAK7E,QACL,IAAMkB,EAAY,EAAKI,KAAK,EAAKJ,UAAUC,KAAK,EAAKD,UAAUG,KAC/DH,EAAU8D,SAAW,EACjB,EAAKH,aAAe,EAAKI,MAAM,IACjC,EAAKC,SACHhE,EACA,EAAKM,QAAQL,IACb,EAAKK,QAAQH,KACb,EACA,EAAKvB,SACL8E,GAGA,EAAKC,aAAe,EAAKI,MAAM,IACjC,EAAKC,SACHhE,EACA,EAAKM,QAAQL,IACb,EAAKK,QAAQH,KACb,EACA,EAAKvB,SACL8E,GAGCA,GACHb,EAAU,UAEZe,QAAQK,QAAQ,EAAKN,gBAChB,CACL,IAAMO,EAAU5C,SAAS6C,eAAe,aACxCD,EAAQE,UAAUC,IAAI,eACtBC,YAAW,WACTJ,EAAQE,UAAUG,OAAO,iBACxB,OAxGY,EA4GnBC,cAAgB,WACd,EAAKjE,aAAc,EACnB,EAAKX,UAAW,EAChB,EAAKD,aAAc,EACnB,EAAKF,YAAa,EAClB,EAAKD,eAAgB,EACrB,EAAKP,cAAe,EACpB,EAAKI,WAAY,EACjB,EAAKC,SAAU,EACf,EAAKN,cAAe,EAChB,EAAKH,aACP,EAAK2B,UAvHU,EA2HnBiE,iBAAmB,SAAA1C,GACjB,EAAK4B,WAAa5B,GA5HD,EA+HnB2C,oBAAsB,SAAA3C,GAElB,EAAKlD,YADS,OAAZkD,GAhIa,EAsInB4C,kBAAoB,SAAA5C,GAEhB,EAAK6C,MADS,SAAZ7C,EACW,GACQ,WAAZA,EACI,GAEA,IA5IE,EAgJnB8C,qBAAuB,WACrBjB,QAAQC,KAAK,QACb,EAAK/E,OAAM,GACX,EAAKsB,KAAKmD,SAAQ,SAAAtD,GAAG,OACnBA,EAAIsD,SAAQ,SAAArE,GACLA,EAAKC,SAAYD,EAAKE,QACzBF,EAAKQ,QAAS,SAIpB,EAAKoF,cAAc,EAAK1E,KAAK,GAAG,IAChC,EAAKtB,QACL8E,QAAQK,QAAQ,SA1JhB,EAAKrE,UAAW,EAChB,EAAKD,aAAc,EACnB,EAAKF,YAAa,EAClB,EAAKD,eAAgB,EACrB,EAAKP,cAAe,EACpB,EAAKD,cAAe,EACpB,EAAKK,WAAY,EACjB,EAAKC,SAAU,EACf,EAAKyF,UAAW,EAChB,EAAKnG,cAAWsC,EAChB,EAAKX,aAAc,EACnB,EAAKoD,WAAa,KAClB,EAAKI,MAAQ,CAAC,WAAY,MAC1B,EAAKiB,OAAS,CAAC,OAAQ,SAAU,QACjC,EAAKJ,MAAQ,GACb,EAAKK,QAAU,CAAC,KAAM,OACtB,EAAKpG,aAAc,EACnB,EAAKyB,QAAU,CACbL,IAAK,GACLE,IAAK,GACL+E,UAAU,GAEZ,EAAKlF,UAAY,CACfC,IAAK,GACLE,IAAK,EACL+E,UAAU,GAEZ,EAAK9E,KAAO,GA7BK,E,iFAgCjBkB,SAAS6C,eAAe,QAAQ5C,iBAAiB,eAAe,SAAA7C,GAC9DA,EAAEyG,sB,+BA8HI,IAAD,OAEP,OADA9D,KAAK6B,WAEH,yBAAKzB,UAAU,QACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACb,0CAEF,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CACEQ,aAAcZ,KAAKoD,iBACnBzC,KAAK,mBACLG,QAASd,KAAK0C,MACd1B,GAAG,YACHD,SAAS,gBAEX,yBAAKX,UAAU,SAASc,QAASlB,KAAKoC,wBAAtC,aAGA,yBAAKhC,UAAU,SAASc,QAASlB,KAAKvC,OAAtC,cAGA,yBAAK2C,UAAU,SAASc,QAASlB,KAAKmC,OAAtC,yBAGA,yBAAK/B,UAAU,SAASc,QAASlB,KAAKwD,sBAAtC,iBAGA,kBAAC,EAAD,CACE5C,aAAcZ,KAAKqD,oBACnB1C,KAAMX,KAAK4D,QAAQ,GACnB9C,QAASd,KAAK4D,QACd5C,GAAG,eACHD,SAAS,mBAEX,kBAAC,EAAD,CACEH,aAAcZ,KAAKsD,kBACnB3C,KAAMX,KAAK2D,OAAO,GAClB7C,QAASd,KAAK2D,OACd3C,GAAG,aACHD,SAAS,cAIf,yBAAKC,GAAG,WACN,yBAAKZ,UAAU,qBACb,qDACA,yBAAKA,UAAU,kBAEjB,yBAAKA,UAAU,qBACb,0CACA,yBAAKA,UAAU,4BAGjB,yBAAKA,UAAU,qBACb,6CACA,yBAAKA,UAAU,+BAEjB,yBAAKA,UAAU,qBACb,0CACA,yBAAKA,UAAU,4BAEjB,yBAAKA,UAAU,qBACb,iEACA,yBAAKA,UAAU,4BACb,6BACE,uBAAGA,UAAU,sCAKrB,yBAAKY,GAAG,OAAOZ,UAAU,WAAW2D,UAAW/D,KAAKmD,eACjDnD,KAAKjB,KAAKoC,KAAI,SAAAvC,GAAG,OAChBA,EAAIuC,KAAI,SAAAtD,GACN,OACE,kBAAC,EAAD,CACEmD,GAAI,OAASnD,EAAKe,IAAM,IAAMf,EAAKiB,IACnCuC,IAAKxD,EAAKe,IAAM,IAAMf,EAAKiB,IAC3BF,IAAKf,EAAKe,IACVE,IAAKjB,EAAKiB,IACVxB,OAAQ,EACR6B,OAAQ,EAAKA,mB,+BAU3B6E,EACAC,EACAC,EACAC,EACAC,GAIC,IAAD,OAHA/B,EAGA,wDAFAgC,EAEA,uDAFY,GACZC,EACA,uDADY,EAENC,EAAU,CACd,CAAE3F,IAAK,EAAGE,IAAK,GACf,CAAEF,KAAM,EAAGE,IAAK,GAChB,CAAEF,IAAK,EAAGE,IAAK,GACf,CAAEF,IAAK,EAAGE,KAAM,IAEdkB,KAAK0D,UACPa,EAAQC,KACN,CAAE5F,IAAK,EAAGE,IAAK,GACf,CAAEF,KAAM,EAAGE,IAAK,GAChB,CAAEF,KAAM,EAAGE,KAAM,GACjB,CAAEF,IAAK,EAAGE,KAAM,IAGpB,IAAM2F,EAAY,kBAChBJ,EAAUK,MAAK,SAACC,EAAGC,GACjB,GAAIT,EAAO,CAET,IAAMU,EACJF,EAAElC,SAAWkC,EAAEG,WAAaF,EAAEnC,SAAWmC,EAAEE,WAG7C,OAAoB,IAAhBD,EACKA,EAGFF,EAAEG,UAAYF,EAAEE,UAGvB,OAAOH,EAAElC,SAAWmC,EAAEnC,aAGtBsC,EAAgB,SAACnG,EAAKE,GAE1B,GAAIF,EA7SS,IA6SWA,GAAO,GAAKE,EA5SvB,IA4S2CA,GAAO,EAAG,CAEhE,IAAMkG,EAAgB,EAAKjG,KAAKH,GAAKE,GAErC,GACEkG,EAAc3G,QACd2G,EAActF,WACdsF,EAAclH,QAEd,OAAO,OAIsB+B,IAA3BmF,EAAcvC,UAChB4B,EAAUG,KAAKQ,IAKfA,EAAc9G,OAAS8F,EAAWvB,SAAWuC,EAAcvC,eAChC5C,IAA3BmF,EAAcvC,YAEduC,EAAcvC,SAAWuC,EAAc9G,OAAS8F,EAAWvB,SAC3DuC,EAAchB,WAAaA,GAGzBG,QAAqCtE,IAA5BmF,EAAcF,YAQzBE,EAAcF,UACZ9C,KAAKiD,IAAInG,EAAMoF,GAAWlC,KAAKiD,IAAIrG,EAAMqF,IAUxCe,EAAc3F,YACjB2F,EAAc3F,WAAY,EACtBgD,GACFY,YAAW,WACL,EAAK1F,WAAa6G,GACpBY,EAAcE,kBAGfZ,EAAY,EAAKf,UAMtB4B,EAAc,SAAdA,EAAe7H,EAAQ8H,GAEtB9H,EAAOQ,UACNuE,EACFY,YAAW,WACL,EAAK1F,WAAa6G,GACpB9G,EAAO+H,gBAEPD,EAAS9H,EAAOmF,UAAY,EAAKc,OAErCjG,EAAOgC,QAAS,EAElB6F,EAAY7H,EAAO0G,WAAYoB,KAInCb,EAAQrC,SAAQ,SAAAoD,GACdP,EAAcf,EAAWpF,IAAM0G,EAAO1G,IAAKoF,EAAWlF,IAAMwG,EAAOxG,QAGrE2F,IAEA,IAAMc,EAAWlB,EAAU,GAE3B,YAAiBxE,IAAb0F,IAIJlB,EAAUmB,QAEVD,EAAS7F,WAAY,EACjB6F,EAASxH,OAEXoH,EAAYI,EAAUjB,IACf,GAEFtE,KAAK2C,SACV4C,EACAtB,EACAC,EACAC,EACAC,EACA/B,EACAgC,EACAC,EAAY,M,oCAIFN,GAAa,IAAD,OACxBA,EAAW3E,WAAY,EACvB2E,EAAW3F,QAAS,EACpB,IA0BIoH,EApBEC,EAAsB,GAiB5B,GAvBgB,CACd,CAAE9G,IAAK,EAAGE,IAAK,GACf,CAAEF,KAAM,EAAGE,IAAK,GAChB,CAAEF,IAAK,EAAGE,IAAK,GACf,CAAEF,IAAK,EAAGE,KAAM,IAgBVoD,SAAQ,SAAAoD,IAbM,SAAC1G,EAAKE,GAC1B,GAAIF,EAnaS,IAmaWA,GAAO,GAAKE,EAlavB,IAka2CA,GAAO,EAAG,CAChE,IAAMkG,EAAgB,EAAKjG,KAAKH,GAAKE,GAChCkG,EAAc3F,WACjBqG,EAAoBlB,KAAKQ,IAU7BW,CAAc3B,EAAWpF,IAAM0G,EAAO1G,IAAKoF,EAAWlF,IAAMwG,EAAOxG,SAEhE4G,EAAoBE,OACvB,OAAO,EAGT,GACEH,EAAkBzD,KAAK6D,MAAM7D,KAAKC,SAAWyD,EAAoBE,cAC1DH,IAAoBC,EAAoBE,QACjD,IAAML,EAAWG,EAAoBD,GAIrC,OAHAF,EAASjI,OAAS0G,EAhBK,SAAAnG,GACrB,IAAMe,GAAOf,EAAKe,IAAMoF,EAAWpF,KAAO,EACpCE,GAAOjB,EAAKiB,IAAMkF,EAAWlF,KAAO,EAC1C,EAAKC,KAAKH,GAAKE,GAAKT,QAAS,EAc/ByH,CAAeP,GACfvF,KAAKyD,cAAc8B,GACZvF,KAAKyD,cAAcO,O,GAtbI3D,aA0b5ByB,E,WACJ,WAAYlD,EAAKE,GAAM,oBAErBkB,KAAKpB,IAAMA,EACXoB,KAAKlB,IAAMA,EACXkB,KAAKlC,SAAU,EACfkC,KAAKjC,OAAQ,EACbiC,KAAK3B,QAAS,EACd2B,KAAKX,WAAY,EACjBW,KAAKV,QAAS,EACdU,KAAK9B,OAAS,EACd8B,KAAKyC,cAAW5C,EAChBG,KAAK8E,eAAYjF,E,oDAGjBG,KAAKN,WAAY,EACjBM,KAAKX,WAAY,EACjBW,KAAKV,QAAS,EACdU,KAAKyC,cAAW5C,EAChBG,KAAK8E,eAAYjF,I,sCAGjB,IAAME,EAAY,QAAUC,KAAKpB,IAAM,IAAMoB,KAAKlB,IAAM,WACxD0C,EAAUzB,K,mCAGVC,KAAKV,QAAS,EACd,IAAMS,EAAY,QAAUC,KAAKpB,IAAM,IAAMoB,KAAKlB,IAAM,QACxD0C,EAAUzB,K,iCAGVC,KAAKlC,SAAU,EACfkC,KAAKjC,OAAQ,EACb,IAAMgC,EAAY,QAAUC,KAAKpB,IAAM,IAAMoB,KAAKlB,IAAM,MACxD0C,EAAUzB,K,8BAGVC,KAAK3B,QAAS,EACd2B,KAAK9B,OAAS,M,KC/dH6H,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrG,SAAS6C,eAAe,SD6H3C,kBAAmByD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAMC,c","file":"static/js/main.54b96f7a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst WEIGHT = 15;\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.parent = this.props.parent;\r\n    this.row = this.props.row;\r\n    this.col = this.props.col;\r\n    this.node = this.parent.grid[this.row][this.col];\r\n    this.launch = this.props.launch;\r\n    this.timeoutRef = undefined;\r\n    this.state = {\r\n      isWall: false,\r\n      weight: 1,\r\n      isStart: this.node.isStart,\r\n      isEnd: this.node.isEnd,\r\n      isChecked: false,\r\n      isVisited: false,\r\n      isPath: false\r\n    };\r\n  }\r\n\r\n  onMouseDown = e => {\r\n    this.parent.launchID = null;\r\n    if (!this.parent.autoRefresh) {\r\n      this.parent.reset();\r\n    }\r\n    if (e.button === 2) {\r\n      this.parent.weightToggle = true;\r\n    }\r\n    this.parent.mousePressed = true;\r\n    if (this.node.isStart || this.node.isEnd) {\r\n      if (this.node.isStart) {\r\n        this.parent.moveStart = true;\r\n      } else {\r\n        this.parent.moveEnd = true;\r\n      }\r\n    } else {\r\n      if (this.parent.weightToggle) {\r\n        if (this.node.weight > 1) {\r\n          this.parent.removeWeights = true;\r\n        } else {\r\n          this.parent.addWeights = true;\r\n        }\r\n      } else {\r\n        if (this.node.isWall) {\r\n          this.parent.removeWalls = true;\r\n        } else {\r\n          this.parent.addWalls = true;\r\n        }\r\n      }\r\n    }\r\n    this.onMouseEnter();\r\n  };\r\n  onMouseEnter = () => {\r\n    if (this.parent.mousePressed) {\r\n      if ((this.parent.moveStart || this.parent.moveEnd) && !this.node.isWall) {\r\n        if (this.parent.moveStart && !this.node.isStart) {\r\n          this.node.isStart = true;\r\n          const exNodeRow = this.parent.startNode.row;\r\n          const exNodeCol = this.parent.startNode.col;\r\n          this.parent.grid[exNodeRow][exNodeCol].updateIO();\r\n          this.parent.startNode.row = this.row;\r\n          this.parent.startNode.col = this.col;\r\n          this.setState({ isStart: true });\r\n        } else if (this.parent.moveEnd && !this.node.isEnd) {\r\n          this.node.isEnd = true;\r\n          const exNodeRow = this.parent.endNode.row;\r\n          const exNodeCol = this.parent.endNode.col;\r\n          this.parent.grid[exNodeRow][exNodeCol].updateIO();\r\n          this.parent.endNode.row = this.row;\r\n          this.parent.endNode.col = this.col;\r\n          this.setState({ isEnd: true });\r\n        }\r\n        this.parent.launchDelay = true;\r\n      } else {\r\n        if (\r\n          this.parent.addWalls &&\r\n          !this.node.isWall &&\r\n          this.node.weight === 1\r\n        ) {\r\n          this.node.isWall = true;\r\n          this.setState({ isWall: true });\r\n        } else if (this.parent.removeWalls && this.node.isWall) {\r\n          this.node.isWall = false;\r\n          this.setState({ isWall: false });\r\n        } else if (\r\n          this.parent.addWeights &&\r\n          this.node.weight === 1 &&\r\n          !this.node.isWall\r\n        ) {\r\n          this.node.weight = WEIGHT;\r\n          this.setState({ weight: WEIGHT });\r\n        } else if (this.parent.removeWeights && this.node.weight > 1) {\r\n          this.node.weight = 1;\r\n          this.setState({ weight: 1 });\r\n        }\r\n      }\r\n    }\r\n    if (this.parent.launchDelay && this.parent.autoRefresh) {\r\n      this.launch();\r\n      this.parent.launchDelay = false;\r\n    }\r\n  };\r\n  onUpdate = () => {\r\n    this.node = this.parent.grid[this.row][this.col];\r\n    if (this.node.isVisited) {\r\n      this.setState({ isVisited: true });\r\n    }\r\n    if (this.node.isPath) {\r\n      this.setState({ isPath: true });\r\n    }\r\n  };\r\n  onVisitedUpdate = () => {\r\n    this.setState({ isVisited: true });\r\n  };\r\n  onPathUpdate = () => {\r\n    this.setState({ isPath: true });\r\n  };\r\n  onReset = () => {\r\n    this.node = this.parent.grid[this.row][this.col];\r\n    this.setState({\r\n      isPath: false,\r\n      isVisited: false,\r\n      isChecked: false,\r\n      isWall: this.node.isWall\r\n    });\r\n  };\r\n  onIOUpdate = () => {\r\n    this.setState({ isStart: false, isEnd: false });\r\n  };\r\n  componentDidMount() {\r\n    const eventName = \"node-\" + this.row + \"-\" + this.col;\r\n    document.addEventListener(\"update\", this.onUpdate);\r\n    document.addEventListener(\"reset\", this.onReset);\r\n    document.addEventListener(eventName + \"-visited\", this.onVisitedUpdate);\r\n    document.addEventListener(eventName + \"-path\", this.onPathUpdate);\r\n    document.addEventListener(eventName + \"-IO\", this.onIOUpdate);\r\n  }\r\n  render() {\r\n    const { isStart, isEnd, isWall, isVisited, isPath, weight } = this.state;\r\n    let classNames = \"node \";\r\n    classNames += isStart\r\n      ? \"node-start\"\r\n      : isEnd\r\n      ? \"node-end\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isPath\r\n      ? \"node-path\"\r\n      : isVisited\r\n      ? \"node-visited\"\r\n      : \"\";\r\n    classNames += weight > 1 ? \" node-weight\" : \"\";\r\n    return (\r\n      <div\r\n        className={classNames}\r\n        onMouseDown={this.onMouseDown}\r\n        onMouseEnter={this.onMouseEnter}\r\n      >\r\n        <div>\r\n          <i className=\"far fa-dot-circle iend\"></i>\r\n          <i className=\"far fa-compass istart\"></i>\r\n          <i className=\"fas fa-weight-hanging iweight\"></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.list = this.props.choices;\r\n    this.question = this.props.question;\r\n    this.handleChange = this.props.handleChange;\r\n    this.id = this.props.id;\r\n    this.state = {\r\n      active: false,\r\n      name: this.props.name\r\n    };\r\n  }\r\n  handleListClick = () => {\r\n    if (this.state.active) {\r\n      this.setState({ active: false });\r\n    } else {\r\n      this.setState({ active: true });\r\n    }\r\n  };\r\n  handleOptionClick = content => {\r\n    this.setState({ name: content, active: false });\r\n    this.handleChange(content);\r\n  };\r\n  render() {\r\n    const optionsContainerClass =\r\n      \"options-container\" + (this.state.active ? \" active\" : \"\");\r\n    return (\r\n      <div className=\"drop-list noselect\" id={this.id}>\r\n        <div className=\"list-question button\" onClick={this.handleListClick}>\r\n          {this.question}\r\n        </div>\r\n        <div className=\"select-box\">\r\n          <div className=\"list-button button\" onClick={this.handleListClick}>\r\n            {this.state.name}\r\n          </div>\r\n          <div className={optionsContainerClass}>\r\n            {this.list.map((name, index) => {\r\n              return (\r\n                <div\r\n                  className=\"option\"\r\n                  key={name}\r\n                  onClick={() => this.handleOptionClick(name)}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"radio\"\r\n                    id={this.id + \"option\" + index}\r\n                    name=\"category\"\r\n                  />\r\n                  <label htmlFor={this.id + \"option\" + index}>{name}</label>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node\";\r\nimport List from \"./List\";\r\n\r\nconst ROW_NUMBER = 23; //25\r\nconst COL_NUMBER = 51; //50\r\nconst sendEvent = name => {\r\n  const event = new CustomEvent(name);\r\n  document.dispatchEvent(event);\r\n};\r\n\r\nexport default class Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addWalls = false;\r\n    this.removeWalls = false;\r\n    this.addWeights = false;\r\n    this.removeWeights = false;\r\n    this.mousePressed = false;\r\n    this.weightToggle = false;\r\n    this.moveStart = false;\r\n    this.moveEnd = false;\r\n    this.diagonal = false;\r\n    this.launchID = undefined;\r\n    this.launchDelay = false;\r\n    this.activeAlgo = null;\r\n    this.algos = [\"Dijkstra\", \"A*\"];\r\n    this.speeds = [\"Fast\", \"Normal\", \"Slow\"];\r\n    this.speed = 10;\r\n    this.refresh = [\"ON\", \"OFF\"];\r\n    this.autoRefresh = true;\r\n    this.endNode = {\r\n      row: 11,\r\n      col: 45,\r\n      assigned: true\r\n    };\r\n    this.startNode = {\r\n      row: 11,\r\n      col: 5,\r\n      assigned: true\r\n    };\r\n    this.grid = [];\r\n  }\r\n  componentDidMount() {\r\n    document.getElementById(\"grid\").addEventListener(\"contextmenu\", e => {\r\n      e.preventDefault();\r\n    });\r\n  }\r\n\r\n  initGrid = () => {\r\n    for (let row = 0; row < ROW_NUMBER; row++) {\r\n      this.grid[row] = [];\r\n      for (let col = 0; col < COL_NUMBER; col++) {\r\n        this.grid[row][col] = new createNode(row, col);\r\n        if (row === this.startNode.row && col === this.startNode.col) {\r\n          this.grid[row][col].isStart = true;\r\n        }\r\n        if (row === this.endNode.row && col === this.endNode.col) {\r\n          this.grid[row][col].isEnd = true;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  reset = (update = true) => {\r\n    this.launchID = Math.random();\r\n    this.grid.forEach(row => row.forEach(node => node.reset()));\r\n    if (update) {\r\n      sendEvent(\"reset\");\r\n    }\r\n  };\r\n\r\n  clear = () => {\r\n    this.launchID = Math.random();\r\n    this.grid.forEach(row => row.forEach(node => node.clear()));\r\n    this.reset();\r\n  };\r\n\r\n  visualizeButtonHandler = () => {\r\n    this.launch(true);\r\n  };\r\n\r\n  launch = (animation = false) => {\r\n    if (this.activeAlgo != null) {\r\n      console.time(this.activeAlgo);\r\n      this.reset();\r\n      const startNode = this.grid[this.startNode.row][this.startNode.col];\r\n      startNode.distance = 0;\r\n      if (this.activeAlgo === this.algos[0]) {\r\n        this.Dijkstra(\r\n          startNode,\r\n          this.endNode.row,\r\n          this.endNode.col,\r\n          false,\r\n          this.launchID,\r\n          animation\r\n        );\r\n      }\r\n      if (this.activeAlgo === this.algos[1]) {\r\n        this.Dijkstra(\r\n          startNode,\r\n          this.endNode.row,\r\n          this.endNode.col,\r\n          true,\r\n          this.launchID,\r\n          animation\r\n        );\r\n      }\r\n      if (!animation) {\r\n        sendEvent(\"update\");\r\n      }\r\n      console.timeEnd(this.activeAlgo);\r\n    } else {\r\n      const element = document.getElementById(\"algo-list\");\r\n      element.classList.add(\"choose-algo\");\r\n      setTimeout(() => {\r\n        element.classList.remove(\"choose-algo\");\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.launchDelay = false;\r\n    this.addWalls = false;\r\n    this.removeWalls = false;\r\n    this.addWeights = false;\r\n    this.removeWeights = false;\r\n    this.mousePressed = false;\r\n    this.moveStart = false;\r\n    this.moveEnd = false;\r\n    this.weightToggle = false;\r\n    if (this.autoRefresh) {\r\n      this.launch();\r\n    }\r\n  };\r\n\r\n  handleAlgoChange = content => {\r\n    this.activeAlgo = content;\r\n  };\r\n\r\n  handleRefreshChange = content => {\r\n    if (content === \"ON\") {\r\n      this.autoRefresh = true;\r\n    } else {\r\n      this.autoRefresh = false;\r\n    }\r\n  };\r\n  handleSpeedChange = content => {\r\n    if (content === \"Slow\") {\r\n      this.speed = 60;\r\n    } else if (content === \"Normal\") {\r\n      this.speed = 25;\r\n    } else {\r\n      this.speed = 10;\r\n    }\r\n  };\r\n\r\n  handleMazeGeneration = () => {\r\n    console.time(\"Maze\");\r\n    this.reset(false);\r\n    this.grid.forEach(row =>\r\n      row.forEach(node => {\r\n        if (!node.isStart && !node.isEnd) {\r\n          node.isWall = true;\r\n        }\r\n      })\r\n    );\r\n    this.mazeGenerator(this.grid[1][1]);\r\n    this.reset();\r\n    console.timeEnd(\"Maze\");\r\n  };\r\n\r\n  render() {\r\n    this.initGrid();\r\n    return (\r\n      <div className=\"main\">\r\n        <nav className=\"nav-bar\">\r\n          <div className=\"title\">\r\n            <p>PathFinder</p>\r\n          </div>\r\n          <div className=\"options-bar noselect\">\r\n            <List\r\n              handleChange={this.handleAlgoChange}\r\n              name=\"Select Algorithm\"\r\n              choices={this.algos}\r\n              id=\"algo-list\"\r\n              question=\"Algorithm :\"\r\n            />\r\n            <div className=\"button\" onClick={this.visualizeButtonHandler}>\r\n              Visualize\r\n            </div>\r\n            <div className=\"button\" onClick={this.reset}>\r\n              Clear Path\r\n            </div>\r\n            <div className=\"button\" onClick={this.clear}>\r\n              Clear Walls & Weights\r\n            </div>\r\n            <div className=\"button\" onClick={this.handleMazeGeneration}>\r\n              Generate Maze\r\n            </div>\r\n            <List\r\n              handleChange={this.handleRefreshChange}\r\n              name={this.refresh[0]}\r\n              choices={this.refresh}\r\n              id=\"refresh-list\"\r\n              question=\"Auto Refresh :\"\r\n            />\r\n            <List\r\n              handleChange={this.handleSpeedChange}\r\n              name={this.speeds[0]}\r\n              choices={this.speeds}\r\n              id=\"speed-list\"\r\n              question=\"Speed :\"\r\n            />\r\n          </div>\r\n        </nav>\r\n        <div id=\"exemple\">\r\n          <div className=\"exemple-container\">\r\n            <p>Unvisited/Blank Node :</p>\r\n            <div className=\"node exemple\"></div>\r\n          </div>\r\n          <div className=\"exemple-container\">\r\n            <p>Wall Node :</p>\r\n            <div className=\"node exemple node-wall\"></div>\r\n          </div>\r\n\r\n          <div className=\"exemple-container\">\r\n            <p>Visited Node :</p>\r\n            <div className=\"node exemple node-visited\"></div>\r\n          </div>\r\n          <div className=\"exemple-container\">\r\n            <p>Path Node :</p>\r\n            <div className=\"node exemple node-path\"></div>\r\n          </div>\r\n          <div className=\"exemple-container\">\r\n            <p>Weighted Node (cost 15 to cross) :</p>\r\n            <div className=\"node exemple node-weight\">\r\n              <div>\r\n                <i className=\"fas fa-weight-hanging iweight\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"grid\" className=\"noselect\" onMouseUp={this.handleMouseUp}>\r\n          {this.grid.map(row =>\r\n            row.map(node => {\r\n              return (\r\n                <Node\r\n                  id={\"node\" + node.row + \"-\" + node.col}\r\n                  key={node.row + \"-\" + node.col}\r\n                  row={node.row}\r\n                  col={node.col}\r\n                  parent={this}\r\n                  launch={this.launch}\r\n                />\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  Dijkstra(\r\n    parentNode,\r\n    goalRow,\r\n    goalCol,\r\n    astar,\r\n    ID,\r\n    animation = false,\r\n    nodeQueue = [],\r\n    iteration = 0\r\n  ) {\r\n    const vectors = [\r\n      { row: 1, col: 0 },\r\n      { row: -1, col: 0 },\r\n      { row: 0, col: 1 },\r\n      { row: 0, col: -1 }\r\n    ];\r\n    if (this.diagonal) {\r\n      vectors.push(\r\n        { row: 1, col: 1 },\r\n        { row: -1, col: 1 },\r\n        { row: -1, col: -1 },\r\n        { row: 1, col: -1 }\r\n      );\r\n    }\r\n    const sortQueue = () =>\r\n      nodeQueue.sort((a, b) => {\r\n        if (astar) {\r\n          //if we use A* we sort by the distance to the origins + the heurisric distance\r\n          const comparaison =\r\n            a.distance + a.heuristic - (b.distance + b.heuristic);\r\n          // return comparaison;\r\n          //if the comparaison decide which of the 2 elements is the better we return it\r\n          if (comparaison !== 0) {\r\n            return comparaison;\r\n          }\r\n          //otherwise compare the heuristic value of the 2 elements\r\n          return a.heuristic - b.heuristic;\r\n        } else {\r\n          // here we sort by the distance to the origin\r\n          return a.distance - b.distance;\r\n        }\r\n      });\r\n    const testNeighbour = (row, col) => {\r\n      //if its off limit we dont try it\r\n      if (row < ROW_NUMBER && row >= 0 && col < COL_NUMBER && col >= 0) {\r\n        //we retrieve the node\r\n        const neighbourNode = this.grid[row][col];\r\n        //if its a wall,the origin or the node checked, we dont need to try so we end the function\r\n        if (\r\n          neighbourNode.isWall ||\r\n          neighbourNode.isChecked ||\r\n          neighbourNode.isStart\r\n        ) {\r\n          return false; // the return is just to end the function, we dont need to return false\r\n        }\r\n        //to simplify the algorithms I consider undefined as infinity\r\n        //so if its the first time we visit the node we add it to the queue\r\n        if (neighbourNode.distance === undefined) {\r\n          nodeQueue.push(neighbourNode);\r\n        }\r\n        //if it has an infinite distance or if the weight + the 'parent' node distance is less than its actual distance\r\n        //we update its distance and its parent\r\n        if (\r\n          neighbourNode.weight + parentNode.distance < neighbourNode.distance ||\r\n          neighbourNode.distance === undefined\r\n        ) {\r\n          neighbourNode.distance = neighbourNode.weight + parentNode.distance;\r\n          neighbourNode.parentNode = parentNode;\r\n        }\r\n        //if we use A* we assign a heuristic value to the node\r\n        if (astar && neighbourNode.heuristic === undefined) {\r\n          //I propose 2 ways to compute this heuristic value,\r\n          //I didnt made any research on wich one is the best for this case (a grid)\r\n          // but i found the first one to look better with the animations turned on\r\n          //the fisrt on is the min amount of node you ould have to cross if there is no wall or weighted nodes\r\n          //the second one is pure euclidian distance\r\n          //feel free to uncomment/comment those line and try by yourself\r\n          // 1\r\n          neighbourNode.heuristic =\r\n            Math.abs(col - goalCol) + Math.abs(row - goalRow);\r\n          // 2\r\n          // neighbourNode.heuristic = Math.sqrt(\r\n          //   (row - goalRow) ** 2 + (col - goalCol) ** 2\r\n          // );\r\n        }\r\n        // if we are doing some time comparaison we can desactivate the visual update,\r\n        // who will just prevent nodes to refresh their class attributes\r\n        //this if statement is purely visual, so we can skip it\r\n\r\n        if (!neighbourNode.isVisited) {\r\n          neighbourNode.isVisited = true;\r\n          if (animation) {\r\n            setTimeout(() => {\r\n              if (this.launchID === ID) {\r\n                neighbourNode.updateVisited();\r\n              }\r\n              // }, neighbourNode.distance * this.speed);\r\n            }, iteration * this.speed);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    //here is the function to call to update visually the path\r\n    const pathFounded = (parent, offset) => {\r\n      //we skip the start node\r\n      if (!parent.isStart) {\r\n        if (animation) {\r\n          setTimeout(() => {\r\n            if (this.launchID === ID) {\r\n              parent.updatePath();\r\n            }\r\n          }, (offset + parent.distance) * this.speed);\r\n        } else {\r\n          parent.isPath = true;\r\n        }\r\n        pathFounded(parent.parentNode, offset);\r\n      }\r\n    };\r\n    //here we just cycle through each vector to check the neighbours of the current 'parent' node\r\n    vectors.forEach(vector => {\r\n      testNeighbour(parentNode.row + vector.row, parentNode.col + vector.col);\r\n    });\r\n    //then we sort the queue\r\n    sortQueue();\r\n    //and get the next 'parent' node\r\n    const nextNode = nodeQueue[0];\r\n    //if nextNode is undefined, that mean that every possible path as been explore but the end has never been reached, or there is no path to the end node\r\n    if (nextNode === undefined) {\r\n      return false;\r\n    }\r\n    //we remove it from the queue\r\n    nodeQueue.shift();\r\n    //and mark it as checked so we will never look at it again\r\n    nextNode.isChecked = true;\r\n    if (nextNode.isEnd) {\r\n      // pathFounded(nextNode, nextNode.distance);\r\n      pathFounded(nextNode, iteration);\r\n      return true;\r\n    }\r\n    return this.Dijkstra(\r\n      nextNode,\r\n      goalRow,\r\n      goalCol,\r\n      astar,\r\n      ID,\r\n      animation,\r\n      nodeQueue,\r\n      iteration + 1\r\n    );\r\n  }\r\n\r\n  mazeGenerator(parentNode) {\r\n    parentNode.isVisited = true;\r\n    parentNode.isWall = false;\r\n    const vectors = [\r\n      { row: 2, col: 0 },\r\n      { row: -2, col: 0 },\r\n      { row: 0, col: 2 },\r\n      { row: 0, col: -2 }\r\n    ];\r\n    const availablesNeigbours = [];\r\n    const testNeigbours = (row, col) => {\r\n      if (row < ROW_NUMBER && row >= 0 && col < COL_NUMBER && col >= 0) {\r\n        const neighbourNode = this.grid[row][col];\r\n        if (!neighbourNode.isVisited) {\r\n          availablesNeigbours.push(neighbourNode);\r\n        }\r\n      }\r\n    };\r\n    const openMiddleNode = node => {\r\n      const row = (node.row + parentNode.row) / 2;\r\n      const col = (node.col + parentNode.col) / 2;\r\n      this.grid[row][col].isWall = false;\r\n    };\r\n    vectors.forEach(vector => {\r\n      testNeigbours(parentNode.row + vector.row, parentNode.col + vector.col);\r\n    });\r\n    if (!availablesNeigbours.length) {\r\n      return false;\r\n    }\r\n    let randomNeighbour;\r\n    do {\r\n      randomNeighbour = Math.floor(Math.random() * availablesNeigbours.length);\r\n    } while (randomNeighbour === availablesNeigbours.length);\r\n    const nextNode = availablesNeigbours[randomNeighbour];\r\n    nextNode.parent = parentNode;\r\n    openMiddleNode(nextNode);\r\n    this.mazeGenerator(nextNode);\r\n    return this.mazeGenerator(parentNode);\r\n  }\r\n}\r\n\r\nclass createNode {\r\n  constructor(row, col) {\r\n    //variable init\r\n    this.row = row;\r\n    this.col = col;\r\n    this.isStart = false;\r\n    this.isEnd = false;\r\n    this.isWall = false;\r\n    this.isVisited = false;\r\n    this.isPath = false;\r\n    this.weight = 1;\r\n    this.distance = undefined;\r\n    this.heuristic = undefined;\r\n  }\r\n  reset() {\r\n    this.isChecked = false;\r\n    this.isVisited = false;\r\n    this.isPath = false;\r\n    this.distance = undefined;\r\n    this.heuristic = undefined;\r\n  }\r\n  updateVisited() {\r\n    const eventName = \"node-\" + this.row + \"-\" + this.col + \"-visited\";\r\n    sendEvent(eventName);\r\n  }\r\n  updatePath() {\r\n    this.isPath = true;\r\n    const eventName = \"node-\" + this.row + \"-\" + this.col + \"-path\";\r\n    sendEvent(eventName);\r\n  }\r\n  updateIO() {\r\n    this.isStart = false;\r\n    this.isEnd = false;\r\n    const eventName = \"node-\" + this.row + \"-\" + this.col + \"-IO\";\r\n    sendEvent(eventName);\r\n  }\r\n  clear() {\r\n    this.isWall = false;\r\n    this.weight = 1;\r\n  }\r\n}\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './css/main.css'\nimport Grid from \"./components/Grid\"\n\nfunction App() {\n  return (\n    <Grid />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}